<template>
  <div>
    <refund-content
      :is-edit="false"
      :order="order"
      :other-order="otherOrder"
      :attend-list="attendList"
    >
      <template slot="refundInfo">
        <div class="refund-info">
          <div>
            <div>
              <span>退费方式</span>
              <span>{{ refundInfo.refundPayTypeLabel }}</span>
            </div>
            <div>
              <span>姓名</span>
              <span>{{ refundInfo.bankCardPayee }}</span>
            </div>
            <div>
              <span>银行名称</span>
              <span>{{ refundInfo.bankName }}</span>
            </div>
            <div>
              <span>银行卡号</span>
              <span>{{ refundInfo.bankcardNo }}</span>
            </div>
            <div>银行LOGO</div>
          </div>
          <div>
            <div class="tips">
              <span>退费原因</span>
              <div>
                <span>发起人</span>
                <b>{{ refundInfo.createUser }}</b>
                <b>{{ refundInfo.ceateDate }}</b>
              </div>
            </div>
            <p>{{ refundInfo.refundReason }}</p>
          </div>
          <div>
            <div class="tips">
              <span>备注</span>
              <div>
                <span>备注人</span>
                <b>{{ refundInfo.refundRemarkUserName }}</b>
                <b>{{ refundInfo.refundRemarkTime }}</b>
              </div>
            </div>
            <p>{{ refundInfo.refundRemark }}</p>
          </div>
          <div>
            <div class="tips">
              <span>
                审核
                <b>{{ refundInfo.auditResult ? '' : '不通过' }}</b>
              </span>
              <div>
                <span>审核人</span>
                <b>{{ refundInfo.auditUserName }}</b>
                <b>{{ refundInfo.auditTime }}</b>
              </div>
            </div>
            <p>{{ refundInfo.auditRemark }}</p>
          </div>
          <div>
            <div class="tips">
              <span>
                打款
                <b>{{ refundInfo.payResult ? '' : '不通过' }}</b>
              </span>
              <div>
                <span>打款人</span>
                <b>{{ refundInfo.payUserName }}</b>
                <b>{{ refundInfo.payTime }}</b>
              </div>
            </div>
            <p>{{ refundInfo.payRemark }}</p>
          </div>
        </div>
      </template>
    </refund-content>
  </div>
</template>

<script>
import RefundContent from './RefundContent'
import { getBigRefundInfo } from '@/api/foreground/apply'
import { parseTime, deepClone } from '@/utils'
export default {
  components: {
    RefundContent
  },
  data() {
    return {
      refundInfo: {},
      order: [],
      otherOrder: [],
      attendList: []
    }
  },
  created() {
    this.$store.dispatch('getConstant', ['refund_pay_type', 'refund_reaon_type', 'refund_reson'])
    this.fetchData()
  },
  methods: {
    fetchData() {
      getBigRefundInfo({ Loading: true, id: this.$route.query.id }).then(res => {
        this.refundInfo = res.data.bigRefundInfo
        const { auditTime, payTime } = this.refundInfo
        this.refundInfo.auditTime = parseTime(auditTime)
        this.refundInfo.payTime = parseTime(payTime)
        this.order = this.refundInfo.order.filter(item => {
          item.id = item.classId
          if (item.otherName) {
            this.otherOrder.push(item)
            return false
          } else {
            item.payAttend.map(item => (item.workdate = parseTime(item.workdate, 'm-d')))
            this.$set(item, '_refundNum', item.payAttend
              .filter(item => item.whetherRefund).length)
            this.$set(item, '_refundPrice', item.payAttend
              .filter(item => item.whetherRefund)
              .map(item => item.amount)
              .reduce((s, n) => +s + +n, 0))
            this.$set(item, '_otherRefundAmount', 0)
            this.$set(item, '_otherRefundRemark', '')
            this.$set(item, '_totalAmountPrice', item._refundPrice + item._otherRefundAmount)
            this.$set(item, '_refundAttendClassIds', item.payAttend.filter(item => item.whetherRefund).map(item => item.id).join(','))
          }
          return true
        })
        this.attendList = this.order.map(item => ({ [item.classId]: deepClone(item.payAttend) }))
      })
    }
  }
}
</script>

<style lang="scss" scoped>
.refund-info {
  > div {
    &:first-child {
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
    }
    > p {
      margin-top: 6px;
    }
    > div {
      &:last-child:not(:first-child) {
        position: absolute;
        right: -100px;
      }
      &.tips {
        width: 100%;
        display: flex;
        justify-content: space-between;
        div {
          display: flex;
          justify-content: space-between;
          b {
            padding-left: 10px;
          }
        }
      }
      span {
        display: block;
        padding-bottom: 10px;
        &:first-child {
          color: #999;
        }
        b {
          font-weight: 400;
          color: #e01313;
          font-size: 15px;
        }
      }
    }
  }
}
</style>
