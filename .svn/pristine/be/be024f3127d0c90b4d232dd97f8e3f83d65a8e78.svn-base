<template>
  <div class="achievement-box">
    <div class="achievement-box-list">
      <template v-if="achievement.length">
        <el-tag
          v-for="tag in achievement"
          :key="tag.name"
          type="subject"
          closable
          @close="handleCloseTag(tag)"
        >{{ tag.label }} - {{ tag.score }}</el-tag>
      </template>
      <span v-else class="empty">暂无成绩</span>
    </div>
    <div class="inline">
      <el-form
        ref="achievementForm"
        :model="achievementForm"
        :rules="rules"
        :inline="true"
        size="midium"
      >
        <el-form-item prop="subject">
          <el-select
            v-model="achievementForm.subject"
            multiple
            filterable
            allow-create
            default-first-option
            placeholder="请选择科目"
            style="width: 320px;"
          >
            <el-option
              v-for="item in subject"
              :key="item.id"
              :label="item.label"
              :value="item.value"
            />
          </el-select>
        </el-form-item>
        <el-form-item prop="score">
          <el-input v-model="achievementForm.score" style="width: 100px;" placeholder="输入成绩"/>
        </el-form-item>
        <el-form-item>
          <div>
            <el-button type="primary" @click="addAchievement">添加</el-button>
          </div>
        </el-form-item>
      </el-form>
      <div v-if="isEdit">
        <el-button type="primary">保存</el-button>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  props: {
    isEdit: {
      type: Boolean,
      default: false
    }
  },
  data() {
    return {
      score: '',
      achievement: [],
      achievementForm: {
        subject: [],
        score: ''
      },
      rules: {
        subject: [{ required: true, message: '请选择科目', trigger: 'submit' }],
        score: [
          { required: true, min: 1, max: 3, message: '请输入正确数值', trigger: 'submit' },
          { pattern: /^\d+$/, message: '请输入数字', trigger: 'submit' }
        ]
      }
    }
  },
  computed: {
    subject() {
      return this.$store.state.constant.constant.subject
    }
  },
  created() {
    this.$store.dispatch('getConstant', 'subject')
  },
  methods: {
    addAchievement() {
      this.$refs.achievementForm.validate().then(() => {
        const { subject, score } = this.achievementForm
        const selectedList = this.subject.filter(item =>
          subject.some(child => child === item.value)
        ).map(item => {
          this.$set(item, 'score', score)
          return item
        })
        if (this.achievement.length) {
          selectedList.forEach((item, index) => {
            if (this.achievement.some(child => child.value === item.value)) {
              this.achievement[index].score = score
            } else {
              this.achievement.push(item)
            }
          })
        } else {
          this.achievement.push(...selectedList)
        }
        this.pushAchievement()
      }).catch(() => { })
    },
    handleCloseTag(tag) {
      this.achievement.splice(this.achievement.findIndex(item => item.value === tag.value), 1)
      this.pushAchievement()
    },
    pushAchievement() {
      this.$emit('achievement', this.achievement.map(item => ({ subjectId: item.value, entryScore: item.score })))
    }
  }
}
</script>

<style lang="scss" scoped>
.achievement-box {
  overflow: hidden;
  &-list {
    min-height: 50px;
    .empty {
      line-height: 50px;
      font-size: 14px;
      color: #a7a5a5;
    }
  }
}
</style>
