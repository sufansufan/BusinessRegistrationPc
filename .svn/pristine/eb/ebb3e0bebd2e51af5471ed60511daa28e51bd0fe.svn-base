
<template>
  <div class="campus-management-box">
    <div class="campus-content">
      <el-row :gutter="20">
        <el-col :span="6">
          <div class="grid-content">
            <el-tree
              :data="constant.campus"
              :props="defaultProps"
              :expand-on-click-node="false"
              default-expand-all
              node-key="id"
              class="campus-tree">
              <span slot-scope="{ node, data }" class="campus-tree-node">
                <span>{{ node.label }}</span>
                <span class="campus-tree-btn">
                  <div>
                    <el-button type="text" size="mini" @click="() => removeTree(data)"> <i class="el-icon-delete tree-icon"/> </el-button>
                  </div>
                  <div v-if="node.label !== '总部'">
                    <el-button type="text" size="mini" @click="() => editTree(data)">  <i class="el-icon-edit tree-icon"/></el-button>
                  </div>
                  <div v-if="node.label !== '总部'">
                    <el-button type="text" size="mini" @click="() => addTree(data)"> <i class="el-icon-plus tree-icon"/></el-button>
                  </div>
                </span>
              </span>
            </el-tree>
          </div>
        </el-col>
        <el-col :span="18">
          <el-table v-loading="loading" :data="dataList" stripe border style="width: 100%">
            <el-table-column prop="adminOrganName" label="校区名称"/>
            <el-table-column prop="financeName" label="财务主体" width="250"/>
            <el-table-column prop="classroomCount" label="教室数"/>
            <el-table-column prop="areaName" label="行政区域" width="150"/>
            <el-table-column prop="detailedAddress" label="详细地址"/>
            <el-table-column prop="mobile" label="电话"/>
            <el-table-column prop="createDate" label="创建时间"/>
            <el-table-column label="状态">
              <template slot-scope="scope">
                <div v-html="scope.row.statusHtm"/>
              </template>
            </el-table-column>
            <el-table-column label="操作" width="250" fixed="right">
              <template slot-scope="scope">
                <el-button :disabled="!scope.row.whetherEdit" type="text" @click="modifyCampus(scope.row)">编辑</el-button>
                <el-button type="text">{{ scope.row.status === true ? '停用' : '启用' }}</el-button>
                <el-button :disabled="!scope.row.whetherDelete" type="text">删除</el-button>
              </template>
            </el-table-column>
          </el-table>
          <el-pagination
            v-show="count"
            :page-sizes="pageSizes"
            :page-size="limit"
            :total="count"
            :current-page="page"
            :layout="pageLayout"
            @current-change="handleCurrentChange"
            @size-change="handleSizeChange"
          />
        </el-col>
      </el-row>
    </div>
    <Dialog ref="dialog">
      <el-form ref="campusForm" :model="campusForm" class="campus-form">
        <el-form-item label="所属组织架构">
          <el-cascader
            :options="constant.campus"
            v-model="campusForm.parentId"
            :props="campusProps"
            change-on-select/>
        </el-form-item>
        <el-form-item label="名称">
          <el-input v-model="campusForm.name" placeholder="请输入名称"/>
        </el-form-item>
        <el-form-item label="类型">
          <el-radio-group v-model="campusForm.type" size="mini">
            <el-radio-button label="1">节点</el-radio-button>
            <el-radio-button label="2">校区</el-radio-button>
          </el-radio-group>
        </el-form-item>
        <div v-show="campusForm.type === '2'" class="is-campus">
          <el-form-item label="财务主体">
            <el-select v-model="campusForm.financeId" placeholder="请选择财务主体">
              <el-option
                v-for="item in financeList"
                :key="item.id"
                :label="item.financeName"
                :value="item.id"
              />
            </el-select>
          </el-form-item>
          <el-form-item label="联系电话">
            <el-input v-model="campusForm.mobile" placeholder="请输入联系电话"/>
          </el-form-item>
          <el-form-item label="地址选择">
            <el-cascader
              :options="constant.city"
              v-model="campusForm.areaId"
              :props="campusProps"
              change-on-select
              placeholder="省/市/区"/>
          </el-form-item>
          <div class="campus-map-box">
            <div>
              <div id="map-container"/>
            </div>
            <div>
              <el-form-item label="详细地址">
                <el-input v-model="campusForm.detailedAddress"/>
              </el-form-item>
              <el-form-item label="经度">
                <el-input v-model="campusForm.longitude"/>
              </el-form-item>
              <el-form-item label="纬度">
                <el-input v-model="campusForm.latitude"/>
              </el-form-item>
              <el-form-item>
                <div :class="{'check-button': buttonStatus, 'button-action': true}">
                  <el-button size="big" @click="modifyStatus">拖动地图自动修改经纬度</el-button>
                </div>
              </el-form-item>
            </div>
          </div>
        </div>
      </el-form>
      <span slot="footer" class="dialog-footer">
        <el-button size="big" @click="$refs.dialog.show = false">取 消</el-button>
        <el-button type="primary" size="big">确 定</el-button>
      </span>
    </Dialog>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import tables from '@/mixin/tables'
import Dialog from '@/components/Dialog'
import initMap from '@/plugins/map'
import { getAdminOrganList, getFinanceBodyList } from '@/api/backstage/campusManagement'
import { parseTime, id2Level } from '@/utils'
export default {
  name: 'CampusManagement',
  components: {
    Dialog
  },
  mixins: [tables],
  data() {
    return {
      buttonStatus: true,
      dataList: [],
      treeData: [],
      financeList: [],
      campusForm: {
        id: '',
        parentId: [],
        type: 1,
        financeId: '',
        name: '',
        areaId: [],
        detailedAddress: '',
        mobile: '',
        longitude: '',
        latitude: ''
      },

      defaultProps: {
        children: 'children',
        label: 'name'
      },
      campusProps: {
        value: 'id',
        label: 'name'
      }
    }
  },
  computed: {
    ...mapGetters(['constant'])
  },
  created() {
    this.$store.dispatch('getConstant', ['campus', 'city']).then(() => {
      this.fetchData()
      this.fetchFinanceBody()
    })
  },
  methods: {
    fetchData() {
      const params = {
        page: this.page,
        limit: this.limit,
        adminOrganParentIds: 1,
        adminOrganStatus: true
      }
      this.BFD(getAdminOrganList(params).then(({ data }) => {
        const { count, list } = data
        this.count = count
        this.dataList = list
        this.dataList.map(item => {
          item.createDate = parseTime(item.createDate, '{y}-{m}-{d}')
          item.statusHtm = this.renderStateTag(item.status ? '启用' : '停用')
          return item
        })
      }))
    },
    modifyCampus(row) {
      this.$refs.dialog.setTitle('编辑校区')
      this.$refs.dialog.show = true
      this.initMap()
    },
    removeTree(data) {

    },
    editTree(node, data) {
    },
    addTree(data) {
      this.campusForm.parentId = id2Level(this.constant.campus, data.id)
      this.$refs.dialog.setTitle('新增校区')
      this.$refs.dialog.show = true
      this.initMap()
    },
    modifyStatus() {
      this.buttonStatus = !this.buttonStatus
    },
    initMap() {
      initMap()
      console.log(initMap())
    },
    fetchFinanceBody() {
      getFinanceBodyList({ adminOrganParentIds: 1, adminOrganStatus: true }).then(({ data }) => {
        const { list } = data
        this.financeList = list
      })
    }
  }
}
</script>

<style lang="scss" scoped>
.campus-management-box{
  .campus-content{
    .grid-content{
      min-height: calc(100vh - 250px);
      border: 1px solid #f0f0f0;
      border-radius: 8px;
      padding: 10px;
      .campus-tree{
        background: none;
        font-size: 16px;
        .campus-tree-node {
          flex: 1;
          display: flex;
          align-items: center;
          justify-content: space-between;
          font-size: 16px;
          padding-right: 8px;
          .campus-tree-btn{
            display: flex;
            & > div{
              margin-left: 10px;
            }
          }
          .tree-icon{
            width: 30px;
            height: 30px;
            background: #f2f2f2;
            border-radius: 50%;
            line-height: 30px;
            font-size: 16px;
          }
        }
      }
    }
  }
  .campus-form{
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    .is-campus{
      width: 100%;
      display: flex;
      justify-content: space-between;
      flex-wrap: wrap;
    }
    .el-form-item{
      width: calc(33% - 10px);
      .el-select, .el-input, .el-radio-group, .el-cascader{
        width: 100%;
      }
    }
    .campus-map-box{
      display: flex;
      justify-content: space-between;
      width: 100%;
      & > div:first-child{
        width: calc(67% - 10px);
        min-height: 500px;
        overflow: hidden;
        #map-container{
          width: 100%;
          min-height: 500px;
        }
      }
      & > div {
        width: calc(33% - 10px);
        .el-form-item{
          width: 100%;
          .el-select, .el-input{
            width: 100%;
          }
          .button-action{
            .el-button{
              color: #5a5e66;
              &:hover, &:focus{
                background: none;
                color: none;
                border-color: #d8dce5;
              }
            }
          }
          .check-button{
            .el-button{
              color: #c19b62;
              border-color: #c19b62 !important;
              position: relative;
              &:hover, &:focus{
                background: none;
              }
              &:after{
                content: '\2714';
                position: absolute;
                top: -4%;
                right: -2%;
                color:#c19b62;
                background: #fff;
              }
            }
          }
        }
      }
    }
  }
}
</style>
<style lang="scss">
  .campus-management-box{
    .campus-content{
      .el-tree-node__label{
        font-size: 16px;
        color: #000;
      }
      .el-tree-node__content{
        height: 35px;
      }
    }
  }
</style>
