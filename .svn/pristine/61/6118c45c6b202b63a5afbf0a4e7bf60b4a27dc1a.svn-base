<template>
  <div class="other-pay-item">
    <h3>收费项
      <el-button v-if="isEdit" type="text" @click="addOtherOrder">增加收费项</el-button>
    </h3>
    <el-table :data="otherOrder" stripe border style="width: 100%">
      <el-table-column prop="date" label="收费内容">
        <template slot-scope="scope">
          <template v-if="isEdit">
            <el-autocomplete
              v-model="scope.row.name"
              :fetch-suggestions="(v, c) => querySearch(v, c, scope.row.chargeId)"
              clearable
              value-key="name"
              style="width: 400px;"
              placeholder="请输入内容"
              @select="v => selectedChargeItem(v, scope.$index)"
            >
              <el-select
                slot="prepend"
                v-model="scope.row.chargeId"
                placeholder="请选择"
                style="width: 90px;"
                @change="getChargeItemList(scope.row.chargeId)"
              >
                <el-option
                  v-for="item in constant.charge_type"
                  :key="item.id"
                  :label="item.label"
                  :value="item.value"
                />
              </el-select>
            </el-autocomplete>
          </template>
          <template v-else>{{ scope.row.name }}</template>
        </template>
      </el-table-column>
      <el-table-column prop="date" label="数量" width="200">
        <template slot-scope="scope">
          <template v-if="isEdit">
            <el-input-number
              v-model="scope.row.number"
              :disabled="!scope.row._isEdit"
              :min="1"
              :max="999"
              controls-position="right"
              @change="calcPrice"
            />
          </template>
          <template v-else>
            <div class="price-font">{{ scope.row.number }}</div>
          </template>
        </template>
      </el-table-column>
      <el-table-column prop="date" label="产品单价" width="150">
        <template slot-scope="scope">
          <template v-if="isEdit">
            <el-input-number
              v-model="scope.row.singlePrice"
              :disabled="!scope.row._isEdit"
              :min="1"
              :max="scope.row._maxSinglePrice"
              controls-position="right"
              @change="calcPrice"
            />
          </template>
          <template v-else>
            <div class="price-font">￥{{ scope.row.price }}</div>
          </template>
        </template>
      </el-table-column>
      <el-table-column prop="date" label="应付金额" width="150">
        <template slot-scope="scope">
          <template v-if="isEdit">
            <count-num :num="scope.row.price" prefix="￥"/>
          </template>
          <template v-else>
            <div class="price-font">￥{{ scope.row.price }}</div>
          </template>
        </template>
      </el-table-column>
      <el-table-column prop="date" label="实付金额" width="150">
        <template slot-scope="scope">
          <template v-if="isEdit">
            <el-input-number
              v-model="scope.row.realPayment"
              :disabled="!scope.row._isEdit"
              :min="0"
              :max="scope.row._maxRealPayment"
              controls-position="right"
            />
          </template>
          <template v-else>
            <div class="price-font">￥{{ scope.row.realPayment }}</div>
          </template>
        </template>
      </el-table-column>
      <el-table-column v-if="isEdit" prop="date" label="操作" width="100">
        <template slot-scope="scope">
          <el-button type="text" @click="delItem(scope.$index)">删除</el-button>
        </template>
      </el-table-column>
    </el-table>
  </div>
</template>

<script>
import { mapGetters } from 'vuex'
import { getChargeItemList } from '@/api/finance/payService'
export default {
  props: {
    isEdit: {
      type: Boolean,
      default: false
    },
    otherOrder: {
      type: Array,
      default: () => []
    }
  },
  data() {
    return {
      otherChargeItemList: {}
    }
  },
  computed: {
    ...mapGetters(['constant'])
  },
  created() {
    this.$store.dispatch('getConstant', 'charge_type')
    this.getChargeItemList('2')
  },
  methods: {
    addOtherOrder() {
      this.otherOrder.push({
        id: '',
        chargeId: '2',
        number: 1,
        singlePrice: 0,
        price: 0,
        realPayment: 0
      })
    },
    getChargeItemList(category) {
      if (this.otherChargeItemList[category]) return
      getChargeItemList({
        chargeItem: {
          category,
          status: true
        }
      }).then(res => {
        this.otherChargeItemList[category] = res.data.list
      })
    },
    querySearch(value, cb, id) {
      const list = this.otherChargeItemList[id]
      const results = value ? list.filter(item => item.name.includes(value)) : list
      cb(results)
    },
    selectedChargeItem(item, index) {
      const { price, id } = item
      const row = this.otherOrder[index]
      row.id = id
      row.singlePrice = +price
      row._maxSinglePrice = +price
      row._maxRealPayment = +price
      row._isEdit = true
      this.calcPrice()
    },
    calcPrice() {
      this.otherOrder.forEach(item => {
        if (item._isEdit) {
          item.price = item.number * item.singlePrice
          item.realPayment = item.price
          item._maxRealPayment = +item.price
        }
      })
    },
    delItem(index) {
      this.otherOrder.splice(index, 1)
    }
  }
}
</script>

<style scoped>
.other-pay-item .price-font {
  font-size: 18px;
}
</style>
