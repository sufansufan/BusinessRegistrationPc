<template>
  <div class="refundRecord">
    <el-tabs v-model="tabsName" @tab-click="$emit('allAmount', allAmount[tabsName])">
      <el-tab-pane label="退费单" name="refundOrder">
        <refund-order
          :select-criteria="select.refundSelect"
          @allAmount="val => getAmount(val, 'refundOrder')"
        >
          <template v-if="isAudit" slot-scope="{row}">
            <slot :row="row"/>
          </template>
          <template slot="refund">
            <slot name="refund"/>
          </template>
          <template slot="refundBtn">
            <slot name="refundBtn"/>
          </template>
        </refund-order>
      </el-tab-pane>
      <el-tab-pane label="报名退费" name="applyRefund" lazy>
        <apply-refund
          :select-criteria="select.applySelect"
          @allAmount="val => getAmount(val, 'applyRefund')"
        >
          <slot name="apply"/>
        </apply-refund>
      </el-tab-pane>
      <el-tab-pane label="其他退费" name="otherRefund" lazy>
        <other-refund
          :select-criteria="select.otherSelect"
          @allAmount="val => getAmount(val, 'otherRefund')"
        >
          <slot name="other"/>
        </other-refund>
      </el-tab-pane>
    </el-tabs>
  </div>
</template>

<script>
import RefundOrder from './RefundOrder'
import ApplyRefund from './ApplyRefund'
import OtherRefund from './OtherRefund'
export default {
  components: {
    RefundOrder,
    ApplyRefund,
    OtherRefund
  },
  props: {
    isAudit: {
      type: Boolean,
      default: false
    },
    select: {
      type: Object,
      default: () => ({})
    }
  },
  data() {
    return {
      tabsName: 'refundOrder',
      allAmount: {
        refundOrder: {},
        applyRefund: {},
        otherRefund: {}
      }
    }
  },
  methods: {
    getAmount(val, type) {
      this.allAmount[type] = val
      this.$emit('allAmount', this.allAmount[type])
    }
  }
}
</script>
